#!/bin/sh

# 0. `select MAC_ADDRESS`(optional)
# 1. `power on`, its off by default
# 2. `scan on` scan for devices
# 2. `scan off` stop scan
# 3. `devices`, get mac address of devices
# 4. `pair MAC_ADDRESS` to pair
# 5. `connect MAC_ADDRESS` to connect
prompt() {
	wofi --dmenu -L 10 -p "$1"
}

notify_bad() {
	notify-send -i "bluetooth-symbolic.symbolic" "Bluetooth" "$1" -u "critical"
	exit 1
}

# Check bluetooth
systemctl is-active --quiet bluetooth || notify_bad "System Service Off"

# power on
powerstatus=$(bluetoothctl show | grep Powered | awk '{print $2}')
if [ "$powerstatus" = "no" ]; then
	bluetoothctl -- power on || error_exit "Could not power on"
fi

cmd=$(printf "Scan\nConnect\nDisconnect" | prompt "Bluetooth")
[ -z "$cmd" ] && exit

case "$cmd" in
Scan)
	bluetoothctl scan on &
	sleep 2
	killall -SIGINT bluetoothctl
	device=$(\bluetoothctl devices | grep "^Device" | prompt "Devices")
	[ -z "$device" ] && exit
	echo "$device" | awk '{printf $2}'
	;;
Connect)
	conn=$(bluetoothctl devices | prompt "Connect")
	[ -z "$conn" ] && exit
	if bluetoothctl connect "$(echo "$conn" | awk '{printf $2}')"; then
		notify-send -i "bluetooth-symbolic.symbolic" "Bluetooth" "Connected"
	else
		notify_bad "Could not connect"
	fi
	;;
Disconnect)
	conn=$(bluetoothctl devices | prompt "Connect")
	[ -z "$conn" ] && exit
	if bluetoothctl disconnect "$(bluetoothctl info | grep "^Device" -B 8 | awk '{printf $2}')"; then
		notify-send -i "bluetooth-symbolic.symbolic" "Bluetooth" "Disconnected"
	else
		notify_bad "Could not disconnect"
	fi
	;;
esac
