#!/bin/sh
usage(){
printf "Usage:	$0 rescan
	$0 networks
	$0 show
	$0 connect <SSID>
"
}

die (){
  >&2 echo "Error: $1"
  exit 1
}

networks(){
  # remove networks with hidden ssid and duplicate ssid
  nmcli -t --fields IN-USE,SSID,SECURITY,BARS device wifi list ifname "wlp194s0" --rescan no \
    | awk -F: '$2 != "" {
      if (!seen[$2] || $1 == "*") {
        best[$2] = $0
        seen[$2] = ($1 == "*" ? 2 : 1)
      }
  }
  END {
    for (s in best) print best[s]
  }' | sort -t: -k1,1r -k4,4r
}
# Mark priority: 2 if "*", 1 otherwise
rescan(){
	nmcli --fields IN-USE,SSID,SECURITY,BARS device wifi list ifname "wlp194s0" --rescan yes >/dev/null &
}

connect(){
	[ -z "$1" ] && die "no ssid"
  if [ -z "$2" ]; then
    command="nmcli dev wifi con '${1//\'/\\\'}'"
  else
    command="nmcli dev wifi con '${1//\'/\\\'}' password '${2//\'/\\\'}'"
  fi
  message="$(sh -c "$command")"
  case "$message" in
    *"successfully activated"* )
      notify-send --urgency low "Network" "Connected to $1"
      ;;
    * )
      notify-send --urgency critical "Network" "Could not connect to ${1}\n$message"
  esac
}

disconnect(){
	dev=$(nmcli -fields TYPE,DEVICE d | grep "wifi " | awk '{print $2}')
  message="$(nmcli dev disconnect "$dev")"
  case "$message" in
    *"successfully disconnected"* )
      notify-send --urgency low "Network" "Disconnected wifi"
      ;;
    * )
      notify-send --urgency critical "Network" "Could not disconnect wifi ${1}\n$message"
  esac
}

connect_gui(){
	if [ "$(nmcli -f NAME con show | sed 's/\s//g' | grep "^${1}$" -c)" -eq 1 ]; then
		connect "$1"
	else
		printf "password: "
		read password
		connect "$1" "$password"
	fi
}
show(){
  nmcli -t -f name connection show --active | head -n 1
}

networks_gui(){
	#printf '(box "b")'
	x=$(networks)
	IFS=$'\n'
	printf '(box :class "network-scroll" :orientation "v" '
	for i in $x; do
		in_use=$(echo $i | cut -f 1 -d ':')
		ssid=$(echo $i | cut -f 2 -d ':')
		bars=$(echo $i | cut -f 4 -d ':')
    printf "(network :ssid \"%s\" :bars \"%s\"  " "${ssid//\"/\\\"}" "$bars"
		if [ $(echo "$in_use" | grep "\*" -c ) -eq 1 ]; then
			printf ":conn true "
		fi
		printf ") "
	done
	printf ')'
}
# printf "(box 'a')"
# networks_gui
# exit
[ "$#" -eq 0 ] && usage && exit 1
case "$1" in
	"rescan")
		rescan
		;;
	"networks")
		networks_gui
		;;
	"connect")
		connect_gui "$2" &
		;;
	"disconnect")
		disconnect &
		;;
	"show")
		show
		;;
esac
